"use strict";

class WebBridge extends object {
	constructor() {
		this.nativeBridge = null;
		this.objects = {};
	}
	
	init(callback) {
		new QWebChannel(qt.webChannelTransport, function(channel) {
			    this.inited = true;
				//console.log("init finished");
				this.nativeBridge = channel.objects.nativeBridge;
				var callBackObject = this;
				if (!this.nativeBridge) {
					console.error("WebBridge init failed !!!!");
					callBackObject = null;
				}
				
				if (callback) {
					callback(callBackObject);
				}
		});
	}
	
	createObject(className, callback) {
	   	if (!this.nativeBridge) {
			console.error("WebBridge not inited, please init first!!!!");
			return -1;
		}
		
		try {  
			var obj = eval("new " + className + "()");
			var objectId = className + this.generateUniqueId();
            this.objects[objectId] = obj;

            var functionName = "createObject";
			this.pushCallBack(objectId, functionName, callback);
            this.nativeBridge.createObject(objectId, className, callback);
			
            return 0;			
			 
		} catch(e) {
			console.error("create object '" + className + "' failed"); 
		}  
		return -1;
	}
	
	this.nativeBridge.onCreateObject.connect(function (objectId, callbackId, args) {
		var obj = this.objects[objectId];
		if (!obj) {
			console.error("WebBridge onCreateObject " + objectId + "," + callbackId + "failed");
			return;
		}
		if (args.length<=0) {
			console.error("onCreateObject error args:", args);
			return;
		}
		var arg = args[0] == 0?null:obj;
		obj.popCallBack(callbackId, arg);
	});
	
	exec(objectId, functionName, callback) {
		var obj = this.objects[objectId];
		if (!obj) {
			console.error("WebBridge exec "+"functionName " + "," + objectId + "failed");
			return -1;
		}
		
		obj.pushCallBack(objectId, functionName, callback);
	    this.nativeBridge.exec(objectId, funtionName, parames, callback);
	}
	
	this.nativeBridge.onExec.connect(function (objectId, callbackId, args) {
		var obj = this.objects[objectId];
		if (!obj) {
			console.error("WebBridge onmessage " + objectId + "," + callbackId + "failed");
			return;
		}
		obj.popCallBack(callbackId, args);
	});
	
	this.nativeBridge.onMessage.connect(function (objectId, callbackId, args) {
		var obj = this.objects[objectId];
		if (!obj) {
			console.error("WebBridge onmessage " + objectId + "," + callbackId + "failed");
			return;
		}
		obj.onMessage(callbackId, args);
	});
}

class WebObject {
    constructor(nativeBridge) {
        this.responseCallbacks = {};
    }

    pushCallBack(funtionName, args, callback) {
		var callbackId = "";
		if (callback) {
			callbackId = funtionName + "_" + generateUniqueId();
			this.responseCallbacks[callbackId] = callback;
		}
    });
	
	popCallBack(args, callbackId) {
		if (callbackId == "") {
			console.error("have no callback!!!");
			return;
		}
		
		this.responseCallbacks[callbackId](args);
        delete this.responseCallbacks[callbackId];
	}
	
	onMessage(args) {
		console.log("onMessage", args);
	}
	
	function generateUniqueId() {
			var uid = randomString(10) + "_" + (new Date()).getTime();
			 console.log(uid);
			 return uid;
		}
}

class TestObject extends WebObject {
	constructor() {
        super();
    }
}

function bridge(callback) {
    console.log("bridge construct");
	var responseCallbacks = {};
	var o_ = {};
	
    new QWebChannel(qt.webChannelTransport, function(channel) {
        //console.log("init finished");
        init(channel.objects.nativeBridge, o_);
        if (callback) {
            callback(o_);
        }
    });
	
    function init(nativeBridge, callback) {
		console.log(nativeBridge);

        o_.normal = function(callback) {
            console.log("nomal");
			request("normal", {}, callback);
        }
		
		o_.minimize = function(callback) {
			console.log("minimize");
			request("minimize", {}, callback);
		}
		
		o_.maximize = function(callback) {
            console.log("maximize");
			request("maximize", {}, callback);
        }
		
		function request(cmd, args, callback) {
			var callbackId = '';
		    if (callback) {
			  callbackId = cmd + '_' + generateUniqueId();
			  responseCallbacks[callbackId] = callback;
		    }
		    nativeBridge.request(cmd, args, callbackId);
		}
		
		nativeBridge.respone.connect(function (callbackId, args) {
			  var callbackFunc = responseCallbacks[callbackId];
			  if (callbackFunc) {
				callbackFunc(args);
				delete responseCallbacks[callbackId];
			  }
		});
		
		function generateUniqueId() {
			var uid = randomString(10) + "_" + (new Date()).getTime();
			 console.log(uid);
			 return uid;
		}
		
		function randomString(len) {
			len = len || 32;
			var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';
			var maxPos = $chars.length;
			var pwd = '';
			for (var i = 0; i < len; i++) {
				pwd += $chars.charAt(Math.floor(Math.random() * maxPos));
			}
			return pwd;
		}
    }
}
